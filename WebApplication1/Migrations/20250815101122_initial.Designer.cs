// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250815101122_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.BusinessUnit", b =>
                {
                    b.Property<int>("BusinessUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessUnitId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("BusinessUnitId");

                    b.ToTable("business_units", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.DamageReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("MachineId")
                        .HasColumnType("int")
                        .HasColumnName("machine_id");

                    b.Property<DateTime>("ReportedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("reported_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ReportedById")
                        .HasColumnType("int")
                        .HasColumnName("reported_by");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("ReportId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ReportedById");

                    b.ToTable("damage_reports", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.KYTReport", b =>
                {
                    b.Property<int>("KytId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("kyt_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KytId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("action");

                    b.Property<string>("Analysis")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("analysis");

                    b.Property<bool?>("ApprovalStatus")
                        .HasColumnType("bit")
                        .HasColumnName("approval_status");

                    b.Property<string>("ConfirmControl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("confirm_control");

                    b.Property<string>("ConfirmPrediction")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("confirm_prediction");

                    b.Property<string>("ConfirmProcess")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("confirm_process");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int>("DangerousMode")
                        .HasColumnType("int")
                        .HasColumnName("dangerous_mode");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("MainControl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("main_control");

                    b.Property<string>("MainPrediction")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("main_prediction");

                    b.Property<string>("MainProcess")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("main_process");

                    b.Property<string>("PrepareControl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("prepare_control");

                    b.Property<string>("PreparePrediction")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("prepare_prediction");

                    b.Property<string>("PrepareProcess")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("prepare_process");

                    b.Property<int?>("ReviewedById")
                        .HasColumnType("int")
                        .HasColumnName("reviewed_by");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    b.HasKey("KytId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReviewedById");

                    b.HasIndex("ScheduleId");

                    b.ToTable("kyt_reports", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.KYTReportTechnician", b =>
                {
                    b.Property<int>("KytId")
                        .HasColumnType("int")
                        .HasColumnName("kyt_id");

                    b.Property<int>("TechnicianId")
                        .HasColumnType("int")
                        .HasColumnName("technician_id");

                    b.HasKey("KytId", "TechnicianId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("kyt_report_technicians", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("machine_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("ProductionLineId")
                        .HasColumnType("int")
                        .HasColumnName("production_line_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("operasional")
                        .HasColumnName("status");

                    b.HasKey("MachineId");

                    b.HasIndex("ProductionLineId");

                    b.ToTable("machines", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("action_url");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("message");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ProductionLine", b =>
                {
                    b.Property<int>("ProductionLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("production_line_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionLineId"));

                    b.Property<int>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("ProductionLineId");

                    b.HasIndex("BusinessUnitId");

                    b.ToTable("production_lines", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.RepairLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<bool?>("ApprovalStatus")
                        .HasColumnType("bit")
                        .HasColumnName("approval_status");

                    b.Property<DateTime?>("KytApprovalTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("kyt_approval_time");

                    b.Property<DateTime?>("RepairCompletionTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("repair_completion_time");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    b.HasKey("LogId");

                    b.HasIndex("ReportId");

                    b.ToTable("repair_logs", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.RepairSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<bool>("ApprovalStatus")
                        .HasColumnType("bit")
                        .HasColumnName("approval_status");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<int>("ReportId")
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("schedule_date");

                    b.HasKey("ScheduleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReportId");

                    b.ToTable("repair_schedules", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("avatar");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int")
                        .HasColumnName("business_unit_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("ProductionLineId")
                        .HasColumnType("int")
                        .HasColumnName("production_line_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.HasKey("UserId");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ProductionLineId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.DamageReport", b =>
                {
                    b.HasOne("WebApplication1.Models.Machine", "Machine")
                        .WithMany("DamageReports")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "Reporter")
                        .WithMany("ReportedDamageReports")
                        .HasForeignKey("ReportedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("WebApplication1.Models.KYTReport", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "Creator")
                        .WithMany("CreatedKYTReports")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "Reviewer")
                        .WithMany("ReviewedKYTReports")
                        .HasForeignKey("ReviewedById");

                    b.HasOne("WebApplication1.Models.RepairSchedule", "RepairSchedule")
                        .WithMany("KYTReports")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("RepairSchedule");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("WebApplication1.Models.KYTReportTechnician", b =>
                {
                    b.HasOne("WebApplication1.Models.KYTReport", "KYTReport")
                        .WithMany()
                        .HasForeignKey("KytId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.User", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KYTReport");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("WebApplication1.Models.Machine", b =>
                {
                    b.HasOne("WebApplication1.Models.ProductionLine", "ProductionLine")
                        .WithMany("Machines")
                        .HasForeignKey("ProductionLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("WebApplication1.Models.Notification", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.ProductionLine", b =>
                {
                    b.HasOne("WebApplication1.Models.BusinessUnit", "BusinessUnit")
                        .WithMany("ProductionLines")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessUnit");
                });

            modelBuilder.Entity("WebApplication1.Models.RepairLog", b =>
                {
                    b.HasOne("WebApplication1.Models.DamageReport", "DamageReport")
                        .WithMany("RepairLogs")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageReport");
                });

            modelBuilder.Entity("WebApplication1.Models.RepairSchedule", b =>
                {
                    b.HasOne("WebApplication1.Models.User", "Creator")
                        .WithMany("CreatedRepairSchedules")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.DamageReport", "DamageReport")
                        .WithMany("RepairSchedules")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("DamageReport");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.HasOne("WebApplication1.Models.BusinessUnit", "BusinessUnit")
                        .WithMany("Users")
                        .HasForeignKey("BusinessUnitId");

                    b.HasOne("WebApplication1.Models.ProductionLine", "ProductionLine")
                        .WithMany()
                        .HasForeignKey("ProductionLineId");

                    b.Navigation("BusinessUnit");

                    b.Navigation("ProductionLine");
                });

            modelBuilder.Entity("WebApplication1.Models.BusinessUnit", b =>
                {
                    b.Navigation("ProductionLines");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.DamageReport", b =>
                {
                    b.Navigation("RepairLogs");

                    b.Navigation("RepairSchedules");
                });

            modelBuilder.Entity("WebApplication1.Models.Machine", b =>
                {
                    b.Navigation("DamageReports");
                });

            modelBuilder.Entity("WebApplication1.Models.ProductionLine", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("WebApplication1.Models.RepairSchedule", b =>
                {
                    b.Navigation("KYTReports");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Navigation("CreatedKYTReports");

                    b.Navigation("CreatedRepairSchedules");

                    b.Navigation("Notifications");

                    b.Navigation("ReportedDamageReports");

                    b.Navigation("ReviewedKYTReports");
                });
#pragma warning restore 612, 618
        }
    }
}
