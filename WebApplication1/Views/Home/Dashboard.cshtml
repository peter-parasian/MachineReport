@{
    ViewData["Title"] = "Dashboard Monitoring";
}

<div class="content-header">
    <div class="page-title">
        <h1><i class="fas fa-chart-line me-3"></i>Dashboard Monitoring</h1>
        <p>Analisis kerusakan dan status operasional mesin secara real-time.</p>
    </div>
    <div class="header-actions">
        @if (User.IsInRole("Manager Maintenance"))
        {
        <button id="export-excel-btn" class="btn btn-outline-primary me-2">
            <i class="fas fa-download me-2"></i>Export
            </button>
        }
        <button class="btn btn-outline-primary" onclick="refreshDashboard()">
            <i class="fas fa-sync-alt me-2"></i>Refresh Data
        </button>
    </div>
</div>

<div class="container-fluid mt-3">
    <div id="loading-indicator" class="text-center mt-5">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Memuat...</span>
        </div>
        <p class="mt-3 text-muted">Sedang memuat data dashboard, mohon tunggu...</p>
    </div>

    <div id="error-message" class="alert alert-danger d-none" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <span></span>
    </div>

    <div id="dashboard-content" class="d-none">
        <div class="row">
            <div class="col-lg-5 mb-4">
                <div class="content-card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><i class="fas fa-chart-pie me-2"></i>Status Operasional Mesin</h5>
                    </div>
                    <div class="card-body d-flex align-items-center justify-content-center">
                        <div style="position: relative; height: 350px; width: 100%;">
                            <canvas id="statusMachineChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-7 mb-4">
                <div class="content-card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><i class="fas fa-chart-line me-2"></i>Tren Kerusakan (7 Hari Terakhir)</h5>
                    </div>
                    <div class="card-body">
                        <div style="position: relative; height: 350px;">
                            <canvas id="breakdownTrendChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-6 mb-4">
                <div class="content-card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><i class="fas fa-industry me-2"></i>Kerusakan per Lini Produksi</h5>
                    </div>
                    <div class="card-body">
                        <div style="position: relative; height: 450px;">
                            <canvas id="brokenProductionLineChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 mb-4">
                <div class="content-card h-100">
                    <div class="card-header">
                        <h5 class="card-title mb-0"><i class="fas fa-clock me-2"></i>Waktu Perbaikan Terlama (Top 10)</h5>
                    </div>
                    <div class="card-body">
                        <div style="position: relative; height: 450px;">
                            <canvas id="topRepairTimesChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script>
        let charts = {};

        // === Konfigurasi Global Chart.js ===
        const getThemeColor = (varName) => getComputedStyle(document.documentElement).getPropertyValue(varName).trim();

        Chart.defaults.font.family = 'Poppins', 'sans-serif';
        Chart.defaults.plugins.legend.labels.color = getThemeColor('--bs-body-color');
        Chart.defaults.plugins.title.color = getThemeColor('--bs-body-color');
        Chart.defaults.locale = 'id-ID';

        // Fungsi pembantu lainnya (tidak berubah)
        function createMultiLineLabel(text, maxLength = 15) {
            if (!text || text.length <= maxLength) return [text];
            const words = text.split(' ');
            const lines = [];
            let currentLine = '';
            words.forEach(word => {
                if ((currentLine + word).length > maxLength && currentLine.length > 0) {
                    lines.push(currentLine.trim());
                    currentLine = word + ' ';
                } else {
                    currentLine += word + ' ';
                }
            });
            if (currentLine.length > 0) lines.push(currentLine.trim());
            if (lines.length > 2) {
                lines[1] = lines[1].substring(0, maxLength - 3) + '...';
                return lines.slice(0, 2);
            }
            return lines;
        }

        function createChartGradient(ctx, colorStart, colorEnd) {
            const gradient = ctx.createLinearGradient(0, 0, 0, ctx.canvas.height);
            gradient.addColorStop(0, colorStart);
            gradient.addColorStop(1, colorEnd);
            return gradient;
        }

        $(document).ready(function() {
            // Memuat data untuk chart dashboard
            loadDashboardData();

            // === PENANGANAN TOMBOL EKSPOR EXCEL ===
            $('#export-excel-btn').on('click', function() {
                // Tampilkan indikator loading untuk memberikan feedback ke user
                const originalHtml = $(this).html();
                $(this).prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Mengekspor...');

                // Arahkan browser ke URL endpoint ekspor. Browser akan otomatis
                // menangani proses download file yang dikirim dari server.
                window.location.href = '/Home/ExportToExcel';

                // Kembalikan tombol ke keadaan semula setelah beberapa saat.
                // Ini berguna agar tombol tidak terkunci dalam status loading jika
                // terjadi masalah atau jika user membatalkan download.
                setTimeout(() => {
                    $(this).prop('disabled', false).html(originalHtml);
                }, 3000); // Reset tombol setelah 3 detik
            });
        });

        function loadDashboardData() {
            $.ajax({
                url: '/Home/GetDataDashboard',
                type: 'GET',
                dataType: 'json',
                timeout: 30000,
                beforeSend: function() {
                    $('#loading-indicator').removeClass('d-none');
                    $('#dashboard-content').addClass('d-none');
                    $('#error-message').addClass('d-none');
                },
                success: function(data) {
                    $('#loading-indicator').addClass('d-none');
                    $('#dashboard-content').removeClass('d-none');
                    renderStatusMachineChart(data.status_machines);
                    renderBreakdownTrendChart(data.broken_by_machines);
                    renderProductionLineChart(data.broken_by_production_line);
                    renderTopRepairTimesChart(data.time_repairs);
                },
                error: function(xhr, status, error) {
                    $('#loading-indicator').addClass('d-none');
                    let errorMessage = "Terjadi kesalahan saat memuat data dashboard.";
                    if (xhr.status === 403) errorMessage = "Anda tidak memiliki izin untuk mengakses data ini.";
                    else if (xhr.status === 500) errorMessage = "Kesalahan server internal. Silakan coba lagi nanti.";
                    else if (status === 'timeout') errorMessage = "Permintaan timeout. Silakan coba lagi.";
                    $('#error-message span').text(errorMessage);
                    $('#error-message').removeClass('d-none');
                }
            });
        }

        function renderStatusMachineChart(statusData) {
            const ctx = document.getElementById('statusMachineChart').getContext('2d');
            if (charts.statusChart) charts.statusChart.destroy();
            const counts = statusData?.status_counts || {};
            const statusConfig = {
                operasional: { label: 'Operasional', color: getThemeColor('--success-color') },
                rusak: { label: 'Rusak', color: getThemeColor('--danger-color') },
                perbaikan: { label: 'Perbaikan', color: getThemeColor('--warning-color') },
                pending: { label: 'Pending', color: getThemeColor('--info-color') }
            };
            const labels = [];
            const dataPoints = [];
            const backgroundColors = [];
            for (const key in statusConfig) {
                if (Object.hasOwnProperty.call(statusConfig, key)) {
                    labels.push(statusConfig[key].label);
                    dataPoints.push(counts[key] || 0);
                    backgroundColors.push(statusConfig[key].color);
                }
            }
            const total = dataPoints.reduce((sum, value) => sum + value, 0);
            charts.statusChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: labels,
                    datasets: [{
                        data: dataPoints,
                        backgroundColor: backgroundColors,
                        borderColor: getThemeColor('--bs-tertiary-bg'),
                        borderWidth: 4,
                        hoverOffset: 15
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: { padding: 20, usePointStyle: true, pointStyle: 'circle', font: { size: 12 } }
                        },
                        tooltip: {
                            callbacks: {
                                label: (context) => {
                                    const percentage = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0;
                                    return ` ${context.label}: ${context.raw} mesin (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function renderBreakdownTrendChart(brokenData) {
            const ctx = document.getElementById('breakdownTrendChart').getContext('2d');
            if (charts.breakdownTrendChart) charts.breakdownTrendChart.destroy();
            const last7Days = getLast7Days();
            const breakdownCountsByDate = (brokenData || []).reduce((acc, breakdown) => {
                if (breakdown.reported_at) {
                    const dateStr = new Date(breakdown.reported_at).toISOString().split('T')[0];
                    acc[dateStr] = (acc[dateStr] || 0) + 1;
                }
                return acc;
            }, {});
            const chartDataPoints = last7Days.map(dayInfo => ({
                x: dayInfo.date,
                y: breakdownCountsByDate[dayInfo.dateString] || 0
            }));
            const yValues = chartDataPoints.map(p => p.y);
            const maxYValue = Math.max(...yValues);
            const suggestedMaxY = maxYValue < 5 ? maxYValue + 2 : Math.ceil(maxYValue * 1.25);
            const gradient = createChartGradient(ctx, 'rgba(220, 53, 69, 0.5)', 'rgba(220, 53, 69, 0.05)');
            charts.breakdownTrendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'Jumlah Kerusakan',
                        data: chartDataPoints,
                        backgroundColor: gradient,
                        borderColor: getThemeColor('--danger-color'),
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: getThemeColor('--danger-color'),
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 5,
                        pointHoverRadius: 8,
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: getThemeColor('--danger-color')
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            suggestedMax: suggestedMaxY,
                            ticks: {
                                stepSize: 1,
                                color: getThemeColor('--bs-body-color'),
                                font: { size: 12 },
                                padding: 10
                            },
                            grid: {
                                color: getThemeColor('--bs-border-color-translucent'),
                                drawBorder: false
                            }
                        },
                        x: {
                            type: 'time',
                            time: {
                                unit: 'day',
                                displayFormats: { day: 'dd MMM' },
                                tooltipFormat: 'eeee, dd MMMM yyyy'
                            },
                            ticks: {
                                color: getThemeColor('--bs-body-color'),
                                font: { size: 12 },
                                maxRotation: 0,
                                autoSkip: true,
                                maxTicksLimit: 7,
                                padding: 15
                            },
                            grid: { display: false }
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            intersect: false,
                            mode: 'index',
                            callbacks: {
                                label: (context) => ` Jumlah Kerusakan: ${context.parsed.y}`
                            },
                            backgroundColor: getThemeColor('--dark-color'),
                            titleColor: getThemeColor('--light-color'),
                            bodyColor: getThemeColor('--light-color'),
                            titleFont: { size: 13, weight: 'bold' },
                            bodyFont: { size: 12 },
                            padding: 12,
                            cornerRadius: 8,
                            displayColors: false,
                            borderColor: 'rgba(255,255,255,0.1)',
                            borderWidth: 1
                        }
                    },
                    interaction: {
                        mode: 'index',
                        intersect: false
                    }
                }
            });
        }

        function renderProductionLineChart(productionLineData) {
            const ctx = document.getElementById('brokenProductionLineChart').getContext('2d');
            if (charts.productionLineChart) charts.productionLineChart.destroy();

            const sortedData = (productionLineData || []).sort((a, b) => b.broken_machine_count - a.broken_machine_count).slice(0, 10);
            const dataValues = sortedData.map(d => d.broken_machine_count);
            const maxValue = Math.max(0, ...dataValues);
            const suggestedMaxX = maxValue < 10 ? maxValue + 2 : Math.ceil(maxValue * 1.2);

            const gradient = createChartGradient(ctx, 'rgba(255, 193, 7, 0.8)', 'rgba(255, 193, 7, 0.3)');
            const processedLabels = sortedData.map(d => createMultiLineLabel(d.production_line_name || `Lini ${d.id}`, 18));
            const fullNames = sortedData.map(d => d.production_line_name || `Lini ${d.id}`);

            charts.productionLineChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: processedLabels,
                    datasets: [{
                        label: 'Jumlah Mesin Rusak',
                        data: dataValues,
                        backgroundColor: gradient,
                        borderColor: getThemeColor('--warning-color'),
                        borderWidth: 2,
                        borderRadius: 8
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    layout: { padding: { left: 10, right: 10, top: 10, bottom: 10 } },
                    scales: {
                        x: {
                            beginAtZero: true,
                            suggestedMax: suggestedMaxX,
                            ticks: {
                                stepSize: 1,
                                color: getThemeColor('--bs-body-color'),
                                font: { size: 11 }
                            },
                            grid: { color: getThemeColor('--bs-border-color-translucent'), drawBorder: false }
                        },
                        y: {
                            ticks: {
                                color: getThemeColor('--bs-body-color'),
                                font: { size: 10 },
                                maxRotation: 0,
                                minRotation: 0
                            },
                            grid: { display: false }
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                title: (tooltipItems) => fullNames[tooltipItems[0].dataIndex],
                                label: (context) => ` Mesin Rusak: ${context.raw}`
                            },
                            titleFont: { size: 12, weight: 'bold' },
                            bodyFont: { size: 11 }
                        }
                    }
                }
            });
        }

        function renderTopRepairTimesChart(repairData) {
            const ctx = document.getElementById('topRepairTimesChart').getContext('2d');
            if (charts.topRepairTimesChart) charts.topRepairTimesChart.destroy();
            const sortedData = (repairData || []).sort((a, b) => b.duration_seconds - a.duration_seconds).slice(0, 10);
            const gradient = createChartGradient(ctx, 'rgba(23, 162, 184, 0.8)', 'rgba(23, 162, 184, 0.3)');
            const processedLabels = sortedData.map(r => createMultiLineLabel(r.machine_name || `Mesin ID ${r.machine_id}`, 18));
            const fullNames = sortedData.map(r => r.machine_name || `Mesin ID ${r.machine_id}`);
            charts.topRepairTimesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: processedLabels,
                    datasets: [{
                        label: 'Durasi Perbaikan (Jam)',
                        data: sortedData.map(r => (r.duration_seconds / 3600).toFixed(2)),
                        backgroundColor: gradient,
                        borderColor: getThemeColor('--info-color'),
                        borderWidth: 2,
                        borderRadius: 8
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true,
                    maintainAspectRatio: false,
                    layout: { padding: { left: 10, right: 10, top: 10, bottom: 10 } },
                    scales: {
                        x: {
                            beginAtZero: true,
                            ticks: { callback: value => value + ' jam', color: getThemeColor('--bs-body-color'), font: { size: 11 } },
                            grid: { color: getThemeColor('--bs-border-color-translucent') }
                        },
                        y: {
                            ticks: { color: getThemeColor('--bs-body-color'), font: { size: 10 }, maxRotation: 0, minRotation: 0 },
                            grid: { display: false }
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            callbacks: {
                                title: (tooltipItems) => fullNames[tooltipItems[0].dataIndex],
                                label: (context) => ` Durasi: ${context.raw} jam`,
                                afterLabel: (context) => `Waktu Aktual: ${sortedData[context.dataIndex].duration_readable}`
                            },
                            titleFont: { size: 12, weight: 'bold' },
                            bodyFont: { size: 11 }
                        }
                    }
                }
            });
        }

        // Helper Functions (tidak berubah)
        function getLast7Days() {
            const days = [];
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            for (let i = 6; i >= 0; i--) {
                const date = new Date(today);
                date.setDate(today.getDate() - i);
                days.push({
                    date: date,
                    dateString: date.toISOString().split('T')[0]
                });
            }
            return days;
        }

        function refreshDashboard() {
            loadDashboardData();
        }

        // Refresh data setiap 5 menit
        setInterval(loadDashboardData, 300000);

        // Mendeteksi perubahan tema (light/dark) dan menggambar ulang chart
        new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.attributeName === 'data-bs-theme') {
                    // Beri sedikit jeda agar variabel warna CSS sempat diperbarui
                    setTimeout(loadDashboardData, 100);
                }
            });
        }).observe(document.documentElement, { attributes: true });
    </script>
}